let Koa,Router,bodyParser,mongoose,serve,path,send,api,jwtMiddleware;_2d2‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_2d2‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_2d2‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_2d2‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_2d2‍.w("koa-static",[["default",["serve"],function(v){serve=v}]]);_2d2‍.w("path",[["default",["path"],function(v){path=v}]]);_2d2‍.w("koa-send",[["default",["send"],function(v){send=v}]]);_2d2‍.w("./api",[["default",["api"],function(v){api=v}]]);_2d2‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();











const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((e) => {
    _2d2‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const buildDirectory = path.resolve(__dirname, '../../blog-frontend/build');
app.use(serve(buildDirectory));
app.use(async (ctx) => {
  // Not Found이고, 주소가 /api로 시작하지 않는 경우
  if (ctx.status === 404 && ctx.path.indexOf('/api') !== 0) {
    // index.html 내용을 반환
    await send(ctx, 'index.html', { root: buildDirectory });
  }
});

const port = PORT || 4000;
app.listen(4000, () => {
  _2d2‍.g.console.log('Listening to port %d', port);
});
